<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ output extension=".cs" #>

/**************************************

	이 파일은 자동 생성되는 파일입니다.
		절대 직접 수정하지마세요.

**************************************/

<#
	// 0: 패킷 이름
	// 1: 패킷 사이즈 
	// 2: 패킷 아이디
	// 3: 멤버 변수
	string PacketClassFormat = 
	@"
    public class {0} : PacketBase
    {{
		/**************************************

			이 파일은 자동 생성되는 파일입니다.
				절대 직접 수정하지마세요.

		**************************************/

		// 패킷의 고유 아이디
        public override ushort PacketId => Id;

		// 헤더를 제외한 사이즈
        public override ushort PacketSize => {1};
        public const ushort Id = {2};

		{3}
    }}
	";

	// 0: 타입
	// 1: 이름
	string MemberFormat = 
	@"
		public {0} {1};
	";
#>
<#
	string xmlFileName = "PacketRaw.xml";
	string dir = Path.GetDirectoryName(this.Host.TemplateFile);
	string xmlPath = Path.Combine(dir, xmlFileName);

	XmlDocument doc = new XmlDocument();
	doc.Load(xmlPath);

	StringBuilder result = new StringBuilder();

	int packetId = 0;
	XmlNode PacketNode = doc.ChildNodes[0]; // Packets
	foreach(XmlNode ClassNode in  PacketNode.ChildNodes) // Class
	{
		XmlNode ClassNameNode = ClassNode.SelectSingleNode("Name");
		string className = ClassNameNode.InnerText;
		XmlNode VariablesNode = ClassNode.SelectSingleNode("Variables");

		StringBuilder members = new StringBuilder();
		List<string> sizes = new List<string>();
		foreach(XmlNode VarNode in VariablesNode.ChildNodes)
		{
			string type = VarNode.Name;
			string name = VarNode.InnerText;

			// Member Variable Declaration
			switch(type)
			{
				case "List":
				{
					string element = VarNode.Attributes["element"].Value;
					members.Append(String.Format(MemberFormat, $"List<{element}>", name));
					break;
				}
				case "Dictionary":
				{
					string key = VarNode.Attributes["key"].Value;
					string value = VarNode.Attributes["value"].Value;
					members.Append(String.Format(MemberFormat,  $"Dictionary<{key}, {value}>", name));
					break;
				}
				default:
				{
					members.Append(String.Format(MemberFormat, type, name));
					break;
				}

			}

			// Size
			sizes.Add($"AdamBitConverter.SizeOf({name})");
		}

		// 0: 패킷 이름
		// 1: 패킷 사이즈 
		// 2: 패킷 아이디
		// 3: 멤버 변수
		string sizeStr = $"(ushort)({String.Join(" + ", sizes)})";

		string packetClass = String.Format(PacketClassFormat, className, sizeStr, packetId++, members.ToString());
		result.Append(packetClass);
	}
#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;

namespace ServerLib.Packet
{
	<#= result.ToString() #>
}